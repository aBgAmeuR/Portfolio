---
import { Icon } from "astro-icon/components";
---

<div
    class="fixed bottom-0 left-0 right-0 z-50 bg-background"
    id="player-container"
    style="display: none;"
>
    <div class="mx-auto max-w-2xl px-6 pb-2 group relative">
        <input
            id="player-progress"
            type="range"
            min="0"
            max="100"
            value="0"
            step="0.00001"
            class="w-full"
        />
        <span
            id="player-time"
            class="absolute -top-1 right-6 text-xs text-muted tabular-nums hidden group-hover:block"
            >0:00 / 0:00</span
        >
        <div class="flex items-center justify-between">
            <span class="truncate">
                <span id="player-title">-</span>
                <span class="text-muted text-sm">â€¢</span>
                <span class="text-muted text-sm" id="player-artists">-</span>
            </span>
            <div class="flex items-center gap-3">
                <div class="flex items-center">
                    <button
                        id="player-prev"
                        class="button-ghost size-8"
                        aria-label="Previous"
                    >
                        <Icon
                            name="previous"
                            class="size-4"
                            aria-hidden="true"
                        />
                    </button>
                    <button
                        id="player-toggle"
                        class="button-ghost group size-8"
                        data-play-pause={false}
                        aria-label="Play/Pause"
                    >
                        <Icon
                            name="play"
                            class="size-4 group-data-[play-pause=false]:hidden"
                            aria-hidden="true"
                        />
                        <Icon
                            name="pause"
                            class="size-4 group-data-[play-pause=true]:hidden"
                            aria-hidden="true"
                        />
                    </button>
                    <button
                        id="player-next"
                        class="button-ghost size-8"
                        aria-label="Next"
                    >
                        <Icon
                            name="previous"
                            class="size-4 rotate-180"
                            aria-hidden="true"
                        />
                    </button>
                </div>
                <div class="flex items-center gap-1">
                    <span class="text-muted" aria-hidden="true">
                        <Icon name="volume" class="size-4" aria-hidden="true" />
                    </span>
                    <input
                        id="player-volume"
                        type="range"
                        min="0"
                        max="1"
                        step="0.01"
                        value="1"
                        class="w-12 max-w-12 accent-foreground"
                        aria-hidden="true"
                    />
                </div>
            </div>
        </div>
    </div>

    <audio id="player-audio" preload="metadata"></audio>

    <script>
        import { music } from "../../contents/music";
        import { getTrackId } from "../../utils/tracks";

        const tracks = music.map((t) => ({
            id: getTrackId(t.title, t.artists),
            title: t.title,
            artists: t.artists,
            url: t.url,
        }));

        const buttons = document.querySelectorAll("[data-track-id]");
        buttons.forEach((button) => {
            button.addEventListener("click", () => {
                const trackId = button.getAttribute("data-track-id");
                const index = tracks.findIndex((t) => t.id === trackId);
                if (index !== -1) loadTrack(index);
            });
        });

        const audio = document.getElementById(
            "player-audio",
        ) as HTMLAudioElement;
        const progress = document.getElementById(
            "player-progress",
        ) as HTMLInputElement;
        const volume = document.getElementById(
            "player-volume",
        ) as HTMLInputElement;
        const toggle = document.getElementById(
            "player-toggle",
        ) as HTMLButtonElement;
        const prevBtn = document.getElementById(
            "player-prev",
        ) as HTMLButtonElement;
        const nextBtn = document.getElementById(
            "player-next",
        ) as HTMLButtonElement;
        const timeEl = document.getElementById(
            "player-time",
        ) as HTMLSpanElement;
        const titleEl = document.getElementById(
            "player-title",
        ) as HTMLParagraphElement;
        const artistsEl = document.getElementById(
            "player-artists",
        ) as HTMLParagraphElement;
        const container = document.getElementById(
            "player-container",
        ) as HTMLDivElement;

        let currentIndex = -1;
        let isSeeking = false;

        function formatTime(seconds: number) {
            if (!Number.isFinite(seconds)) return "0:00";
            const m = Math.floor(seconds / 60);
            const s = Math.floor(seconds % 60)
                .toString()
                .padStart(2, "0");
            return `${m}:${s}`;
        }

        function loadTrack(index: number) {
            if (index < 0 || index >= tracks.length) return;
            currentIndex = index;
            const track = tracks[currentIndex];
            audio.src = track.url;
            titleEl.textContent = track.title;
            artistsEl.textContent = track.artists.join(", ");
            audio.play().catch(() => {
                /* ignore autoplay block */
            });
            container.style.display = "block";
            updateToggleIcon();
            updateMediaSession();
        }

        function playPause() {
            if (audio.paused) audio.play();
            else audio.pause();
            updateToggleIcon();
        }

        function updateToggleIcon() {
            toggle.setAttribute(
                "data-play-pause",
                audio.paused ? "true" : "false",
            );
        }

        function loadById(id: string) {
            const idx = tracks.findIndex((t) => t.id === id);
            if (idx !== -1) loadTrack(idx);
        }

        function updateMediaSession() {
            if (!("mediaSession" in navigator) || currentIndex === -1) return;

            const track = tracks[currentIndex];
            navigator.mediaSession.metadata = new MediaMetadata({
                title: track.title,
                artist: track.artists.join(", "),
                album: "Portfolio Music Player",
                artwork: [{ src: "https://antoinejosset.fr/apple-touch-icon.png", sizes: "180x180", type: "image/png" }],
            });
        }

        function updatePositionState() {
            if (!("mediaSession" in navigator) || !audio.duration) return;

            navigator.mediaSession.setPositionState({
                duration: audio.duration,
                playbackRate: audio.playbackRate,
                position: audio.currentTime,
            });
        }

        function initializeMediaSession() {
            if (!("mediaSession" in navigator)) return;

            navigator.mediaSession.setActionHandler("play", () => {
                audio.play();
                updateToggleIcon();
            });

            navigator.mediaSession.setActionHandler("pause", () => {
                audio.pause();
                updateToggleIcon();
            });

            navigator.mediaSession.setActionHandler("previoustrack", () => {
                if (tracks.length)
                    loadTrack(
                        (currentIndex - 1 + tracks.length) % tracks.length,
                    );
            });

            navigator.mediaSession.setActionHandler("nexttrack", () => {
                if (tracks.length)
                    loadTrack((currentIndex + 1) % tracks.length);
            });

            navigator.mediaSession.setActionHandler("seekto", (details) => {
                if (details.seekTime && audio.duration) {
                    audio.currentTime = details.seekTime;
                    updatePositionState();
                }
            });
        }

        // Wire list clicks globally
        document.addEventListener("click", (e) => {
            const target = e.target as HTMLElement;
            const btn = target.closest(
                "button[data-track-id]",
            ) as HTMLButtonElement | null;
            if (!btn) return;
            const id = btn.getAttribute("data-track-id");
            if (!id) return;
            loadById(id);
        });

        // Controls
        toggle.addEventListener("click", playPause);
        prevBtn.addEventListener("click", () => {
            if (tracks.length)
                loadTrack((currentIndex - 1 + tracks.length) % tracks.length);
        });
        nextBtn.addEventListener("click", () => {
            if (tracks.length) loadTrack((currentIndex + 1) % tracks.length);
        });
        volume.addEventListener("input", () => {
            audio.volume = Number(volume.value);
        });

        // Progress updates
        audio.addEventListener("timeupdate", () => {
            if (isSeeking) return;
            const value = audio.duration
                ? (audio.currentTime / audio.duration) * 100
                : 0;
            progress.value = String(value);
            progress.style.setProperty("--progress", `${value}%`);
            timeEl.textContent = `${formatTime(audio.currentTime)} / ${formatTime(audio.duration)}`;
            updateToggleIcon();
            updatePositionState();
        });
        audio.addEventListener("play", updateToggleIcon);
        audio.addEventListener("pause", updateToggleIcon);
        audio.addEventListener("loadedmetadata", updatePositionState);
        audio.addEventListener("ended", () => {
            if (tracks.length) loadTrack((currentIndex + 1) % tracks.length);
        });

        progress.addEventListener("input", () => {
            isSeeking = true;
            const pct = Number(progress.value) / 100;
            const t = audio.duration * pct;
            progress.style.setProperty("--progress", `${progress.value}%`);
            timeEl.textContent = `${formatTime(t)} / ${formatTime(audio.duration)}`;
        });
        progress.addEventListener("change", () => {
            const pct = Number(progress.value) / 100;
            audio.currentTime = audio.duration * pct;
            isSeeking = false;
        });

        // Initialize MediaSession
        initializeMediaSession();

        // Keyboard controls
        document.addEventListener("keydown", (e) => {
            // Only handle spacebar if no input/textarea is focused and player is visible
            if (e.code === "Space" && 
                !["INPUT", "TEXTAREA"].includes((e.target as HTMLElement)?.tagName) &&
                container.style.display !== "none") {
                e.preventDefault();
                playPause();
            }
        });
    </script>
</div>
